import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { baseUrl } from '../../BaseUrl';

export const messageApi = createApi({
  reducerPath: 'messageApi',
  baseQuery: fetchBaseQuery({
    baseUrl: `${baseUrl}/api/v1`,
    prepareHeaders: (headers, { getState }) => {
      const token = getState()?.auth?.token;
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }
      return headers;
    },
    credentials: 'include',
  }),
  tagTypes: ['Message'], // Define the tags that can be invalidated or provided

  endpoints: (builder) => ({
    sendMessage: builder.mutation({
      query: (data) => ({
        url: '/sendmessage',
        method: 'POST',
        body: data,
      }),
      invalidatesTags: (result, error, { senderId, receiverId }) => [
        { type: 'Message', id: `${senderId}-${receiverId}` },
      ],
    }),
    getMessage: builder.query({
      query: ({ senderId, receiverId }) => ({
        url: '/messages',
        method: 'GET',
        params: { senderId, receiverId },
      }),
      providesTags: (result, error, { senderId, receiverId }) => [
        { type: 'Message', id: `${senderId}-${receiverId}` },
      ],
    }),
    getNotification: builder.query({
      query: () => ({
        url: '/notifications',
        method: 'GET',
      }),
    }),
  }),
});

// Export hooks generated by RTK Query
export const { useSendMessageMutation, useGetMessageQuery,useGetNotificationQuery } = messageApi;
